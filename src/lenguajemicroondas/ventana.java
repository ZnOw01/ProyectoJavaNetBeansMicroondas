/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package lenguajemicroondas;

import Cup.LexerCup;
import Cup.Syntactic;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.parser;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import lenguajemicroondas.MicroondasLexer;
import lenguajemicroondas.Tokens;

/**
 *
 * @author guill
 */
public class ventana extends javax.swing.JFrame {

    /**
     * Creates new form ventana
     */
    public ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBuscar = new javax.swing.JButton();
        btnAnalizar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JScrollPane();
        txtArchivo = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JScrollPane();
        txtIdentificador = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JScrollPane();
        txtAnalizador = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lenguaje Microondas");

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");

        txtArchivo.setColumns(20);
        txtArchivo.setRows(5);
        jPanel1.setViewportView(txtArchivo);

        txtIdentificador.setColumns(20);
        txtIdentificador.setRows(5);
        jPanel2.setViewportView(txtIdentificador);

        txtAnalizador.setColumns(20);
        txtAnalizador.setRows(5);
        jPanel3.setViewportView(txtAnalizador);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBuscar)
                        .addGap(87, 87, 87)
                        .addComponent(btnAnalizar))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(btnGuardar)
                        .addGap(101, 101, 101)
                        .addComponent(btnLimpiar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscar)
                    .addComponent(btnAnalizar)
                    .addComponent(btnGuardar)
                    .addComponent(btnLimpiar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                    .addComponent(jPanel2))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        File archivo;
        String texto;
        JFileChooser files = new JFileChooser();
        files.showOpenDialog(jPanel1);
        archivo = new File(files.getSelectedFile().getAbsolutePath());
        try {
            texto = new String(Files.readAllBytes(archivo.toPath()));
            txtArchivo.setText(texto);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NullPointerException ex) {
            System.out.println("No selecciono archivo");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
MicroondasLexer lexer;
    String resultados;
    String resultadosSintactico;
    
    try {
        // Obtener el texto del área de texto en jPanel1
        String textoEntrada = txtArchivo.getText();
        
        if (textoEntrada.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay texto para analizar", 
                                        "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // ============ ANÁLISIS LÉXICO ============
        Reader reader = new StringReader(textoEntrada);
        lexer = new MicroondasLexer(reader);
        
        resultados = "=== ANÁLISIS LÉXICO DEL MICROONDAS ===\n\n";
        int totalTokens = 0;
        int errores = 0;
        
        while (true){
            Tokens token = lexer.yylex();
            if(token == null) {
                // Agregar resumen al final
                resultados += "\n=== RESUMEN ===\n";
                resultados += "Total de tokens encontrados: " + totalTokens + "\n";
                resultados += "Errores léxicos: " + errores + "\n";
                resultados += "=== FIN DEL ANÁLISIS ===";
                
                // Mostrar resultados léxicos en el jPanel2
                txtIdentificador.setText(resultados);
                break;
            }
            
            totalTokens++;
            switch (token){
                case ERROR: 
                    resultados = resultados + "ERROR: Carácter no válido '" + lexer.yytext() + "'\n";
                    errores++;
                    break;
                case Abrir:
                case Cerrar:
                case Encender:
                case Apagar:
                case Potencia:
                case Pausar:
                case Cocinar:
                case Tiempo:
                    resultados = resultados + "[ Comando: " + lexer.yytext() + " : " + token + " ]\n";
                    break;
                default:
                    resultados = resultados + "[ Token: " + token + " ]\n";
                    break;
            }
        }
        
        // ============ ANÁLISIS SINTÁCTICO ============
        resultadosSintactico = "=== ANÁLISIS SINTÁCTICO DEL MICROONDAS ===\n\n";
        
        // Crear nuevo reader para el análisis sintáctico
        Reader readerSintactico = new StringReader(textoEntrada);
        LexerCup lexerCup = new LexerCup(readerSintactico);
        Syntactic parser = new Syntactic(lexerCup);
        
        try {
            parser.parse();
            
            // Si llega aquí, el análisis fue exitoso
            resultadosSintactico += "ANÁLISIS COMPLETADO EXITOSAMENTE\n\n";
            resultadosSintactico += "El código cumple con la sintaxis correcta del lenguaje del microondas.\n\n";
            resultadosSintactico += "Estructura válida detectada:\n";
            resultadosSintactico += "- Comandos reconocidos correctamente\n";
            resultadosSintactico += "- Secuencia de instrucciones válida\n";
            resultadosSintactico += "- Sin errores sintácticos\n\n";
            resultadosSintactico += "=== FIN DEL ANÁLISIS SINTÁCTICO ===";
            
        } catch (Exception ex) {
            // Si hay error sintáctico
            Symbol simboloError = parser.getS();
            
            resultadosSintactico += " ERROR SINTÁCTICO DETECTADO\n\n";
            
            if (simboloError != null) {
                int linea = simboloError.left + 1;
                int columna = simboloError.right + 1;
                String valorToken = (simboloError.value != null) ? simboloError.value.toString() : "desconocido";
                
                resultadosSintactico += "Ubicación del error:\n";
                resultadosSintactico += "  - Línea: " + linea + "\n";
                resultadosSintactico += "  - Columna: " + columna + "\n";
                resultadosSintactico += "  - Token problemático: " + valorToken + "\n\n";
                
                resultadosSintactico += "Descripción:\n";
                resultadosSintactico += "Se encontró un token inesperado que no cumple con la\n";
                resultadosSintactico += "gramática del lenguaje del microondas.\n\n";
                
                resultadosSintactico += "Posibles soluciones:\n";
                resultadosSintactico += "  • Verifica que los comandos estén bien escritos\n";
                resultadosSintactico += "  • Revisa que la sintaxis de Potencia incluya número seguido de + o -\n";
                resultadosSintactico += "  • Confirma que Tiempo tenga formato: número o número:número\n";
                resultadosSintactico += "  • Asegúrate de que los comandos estén en el orden correcto\n\n";
            } else {
                resultadosSintactico += "No se pudo determinar la ubicación exacta del error.\n";
                resultadosSintactico += "Revisa la estructura general del código.\n\n";
            }
            
            resultadosSintactico += "=== FIN DEL ANÁLISIS SINTÁCTICO ===";
        }
        
        // Mostrar resultados sintácticos en el jPanel3
        txtAnalizador.setText(resultadosSintactico);
        
    } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, "Error en el análisis: " + ex.getMessage(), 
                                    "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JScrollPane jPanel1;
    private javax.swing.JScrollPane jPanel2;
    private javax.swing.JScrollPane jPanel3;
    private javax.swing.JTextArea txtAnalizador;
    private javax.swing.JTextArea txtArchivo;
    private javax.swing.JTextArea txtIdentificador;
    // End of variables declaration//GEN-END:variables
}
